{"version":3,"sources":["main.js"],"names":["$siteList","$","$listLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","logoType","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","console","log","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.a4b19839.js","sourceRoot":"..\\src","sourcesContent":["const $siteList = $('.siteList')//先找到siteList\r\nconst $listLi = $siteList.find('li.last')//声明一个listLi，在siteList里找到li的last（li）\r\nconst x = localStorage.getItem('x')//从localStorage里把x读出来，目前x还是字符串[先尝试读取当前网站下的x]\r\nconst xObject = JSON.parse(x)//把字符串x变成对象\r\n\r\nconst hashMap = xObject || [//（使用数据结构）创建一个哈希组成的数组，来保存网址[如果x成功的变成对象，就把x放到哈希map里。如果不能变成对象，我就把哈希初始化成含有2项的数组]\r\n    { logo: 'A', logoType: 'text', url: 'https://www.acfun.cn' },//logo的类型是文本\r\n    { logo: 'B', logoType: 'text', url: 'https://www.bilibili.com' }\r\n];\r\n\r\n//simplify简化Url\r\nconst simplifyUrl = (url) => {  //接收一个以http开头的url，需要返回一个没有http，没有www的\r\n    return url.replace('https://', '')  //把https://删掉，变成一个空字符串\r\n        .replace('http://', '')  //如果还有，就把http://删掉，变成空字符串\r\n        .replace('www.', '')     //如果还有，就把www.删掉\r\n        .replace(/\\/.*/, '')     //正则，删除/开头的内容， .*表示/后面的任何东西都需要匹配到\r\n}   //replace 会把url变成新的字符串，原本的字符串不变，所以不能return url\r\n\r\nconst render = () => {\r\n    $siteList.find('li:not(.last)').remove()//找到所有siteList里的所有li，唯独不找最后一个li（.list），然后删除\r\n    hashMap.forEach((node, index) => { //forEach会给你2个参数，一个是node，一个是下标\r\n        const $li = $(`<li>\r\n            <div class=\"site\">\r\n                <div class=\"logo\">${node.logo}</div>\r\n                <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n                <div class='close'>\r\n                   <svg class=\"icon\">\r\n                      <use xlink:href=\"#icon-close\"></use>\r\n                   </svg>\r\n                </div>\r\n            </div>\r\n        </li>`).insertBefore($listLi)//现在使用hashmap，新增网站时只需把hashmap增加一项，然后在从新渲染hashmap\r\n        //用js实现a标签功能，因为使用a标签时，不能点击关闭按钮\r\n        $li.on('click', () => {  //当点击li的click（click自己，不需要click里面）\r\n            window.open(node.url) //window.open（打开一个新窗口），地址是node.url\r\n        })\r\n        $li.on('click', '.close', (e) => { //当点击li里面的close时，得到事件e，然后调用e.stopPropagation()\r\n            e.stopPropagation()//阻止冒泡，就是点击关闭按钮，不跳转页面\r\n            hashMap.splice(index, 1)  //在哈希map里（数组里删除使用splice），在index处，删掉1个\r\n            render() //从新渲染哈希map\r\n        })\r\n    })\r\n}\r\n\r\nrender()\r\n\r\n$('.addButton')\r\n    //监听addButton的点击事件\r\n    .on('click', () => {\r\n        let url = window.prompt('请问你要添加的网址是什么？')//弹出一个对话框让用户输入网址\r\n        //声明一个url 等于用户输入的网站\r\n        if (url.indexOf('http') !== 0) {//如果url的第一个字符不等于0，说明不是http开头\r\n            url = 'https://' + url//就帮用户自动加上https\r\n        }\r\n        console.log(url)\r\n        /*const $li = $(`\r\n        < li >\r\n        <a href=\"${url}\">\r\n            <div class=\"site\">\r\n                <div class=\"logo\">${url[8]}</div>\r\n                <div class=\"link\">${url}</div>\r\n            </div>\r\n        </a>\r\n        </li >\r\n        `).insertBefore($listLi)//创建一个div，把变量url作为logo和网址，通过inserBefore API 把新创建的div插到listLi前面*/\r\n        hashMap.push({\r\n            logo: simplifyUrl(url)[0].toUpperCase(),//JS方式toUpperCase()把一个字母变成大写，还有css方法\r\n            //调用简化url函数，删除https，留下首字母\r\n            logoType: 'text',\r\n            url: url\r\n        });//点击添加按钮时，在哈希变上添加新的网址\r\n        render()\r\n    });\r\n\r\nwindow.onbeforeunload = () => {//用户关闭页面之前触发的api，等于一个函数[在你关闭网页时，会被哈希存到x里]\r\n    const string = JSON.stringify(hashMap)//把哈希表变成字符串（JSON是api），因为localStorage只能存字符串\r\n    localStorage.setItem('x', string)//在本地存储里，设置一个x，它的值是刚才存储的字符串\r\n}\r\n\r\n$('globalInput').on('input', (e) => {\r\n    e.stopPropagation()\r\n})\r\n\r\n$(document).on('keypress', (e) => {\r\n    let { key } = e\r\n    //console.log(key)\r\n    for (let i = 0; i < hashMap.length; i++) {\r\n        if (hashMap[i].logo.toLowerCase === key) {\r\n            window.open(hashMap[i].url)\r\n            break\r\n        }\r\n    }\r\n})\r\n\r\n/*//监听        //键盘按下事件\r\n$(document).on('keypress', (e) => {\r\n    const { key } = e    //是 const key = e.key 的简写\r\n    for (let i = 0; i < hashMap.length; i++) { //遍历哈希，看谁的logo 等于 key（输入的字母）\r\n        if (hashMap[i].logo.toLowerCase() === key) { //toLowerCase() 把字母变成小写\r\n            window.open(hashMap[i].url)   //打开哈希 第i个的 url\r\n            e.stopPropagation()\r\n        }\r\n    }\r\n})*/\r\n\r\n"]}